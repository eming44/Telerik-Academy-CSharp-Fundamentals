01. Numbers from 1 to N-------------------------------------------

using System;


class Program
{
    static void Main()
    {
        int n = int.Parse(Console.ReadLine());

        for (int i = 1; i <= n; i++)
        {
            Console.Write("{0} " ,i);
        }
       
    }
}

02. Not Divisible Numbers-------------------------------------

using System;


class Program
{
    static void Main()
    {
        int n = int.Parse(Console.ReadLine());
        if (n < 1 || n > 1500)
        { }

        else
        {
            for (int i = 1; i <= n; i++)
            {
                int a = i;
                int b = i;
                a %= 3;
                b %= 7;
                if (a != 0 && b != 0)
                {
                    Console.Write("{0} ", i);
                }
            }
        }
    }
}

03. MMSA of N Numbers--------------------------------------

using System;


class Program
{
    static void Main()
    {
        double n = double.Parse(Console.ReadLine());
        if (n >= 1 && n <= 1000)
        {
            double min = 0;
            double max = 0;
            double sum = 0;
            double avg = 0;

            double a = double.Parse(Console.ReadLine());
            if (a >= -10000 && a <= 10000)
            {
                min = a;
                sum = a;
                max = a;

                for (int i = 0; i < n - 1; i++)
                {
                    a = double.Parse(Console.ReadLine());
                    if (a >= -10000 && a <= 10000)
                    {
                        if (max <= a)
                        {
                            max = a;
                        }

                        else if (min >= a)
                        {
                            min = a;
                        }

                        sum += a;
                    }

                    else
                    {
                        Environment.Exit(0);
                    }
                }
               
                    avg = sum / n;
                    Console.WriteLine("min={0:F2}", min);
                    Console.WriteLine("max={0:F2}", max);
                    Console.WriteLine("sum={0:F2}", sum);
                    Console.WriteLine("avg={0:F2}", avg);
                
            }
            else { }
        }
        else { }
    }
}

04. Print a Deck---------------------------------------------------

using System;


class Program
{
    static void Main()
    {
        string card = Console.ReadLine();
        int CardNumber;

        if (int.TryParse(card, out CardNumber))
        { 
            if (CardNumber >= 2 && CardNumber <= 10)
                for (int i = 2; i <= CardNumber; i++)
                {
                    Console.WriteLine("{0} of spades, {0} of clubs, {0} of hearts, {0} of diamonds", i);
                }
        }

        else if (card == "A")
        {
            for (int i = 2; i <= 10; i++)
            {
                Console.WriteLine("{0} of spades, {0} of clubs, {0} of hearts, {0} of diamonds", i);
            }
            Console.WriteLine("J of spades, J of clubs, J of hearts, J of diamonds");
            Console.WriteLine("Q of spades, Q of clubs, Q of hearts, Q of diamonds");
            Console.WriteLine("K of spades, K of clubs, K of hearts, K of diamonds");
            Console.WriteLine("A of spades, A of clubs, A of hearts, A of diamonds");
        }

        else if (card == "J")
        {
            for (int i = 2; i <= 10; i++)
            {
                Console.WriteLine("{0} of spades, {0} of clubs, {0} of hearts, {0} of diamonds", i); 
            }
            Console.WriteLine("{0} of spades, {0} of clubs, {0} of hearts, {0} of diamonds", card);
        }

        else if (card == "Q")
        {
            for (int i = 2; i <= 10; i++)
            {
                Console.WriteLine("{0} of spades, {0} of clubs, {0} of hearts, {0} of diamonds", i);
            }
            Console.WriteLine("J of spades, J of clubs, J of hearts, J of diamonds");
            Console.WriteLine("Q of spades, Q of clubs, Q of hearts, Q of diamonds");
        }

        else if (card == "K")
        {
            for (int i = 2; i <= 10; i++)
            {
                Console.WriteLine("{0} of spades, {0} of clubs, {0} of hearts, {0} of diamonds", i);
            }
            Console.WriteLine("J of spades, J of clubs, J of hearts, J of diamonds");
            Console.WriteLine("Q of spades, Q of clubs, Q of hearts, Q of diamonds");
            Console.WriteLine("K of spades, K of clubs, K of hearts, K of diamonds");
        }
    }
}

05. Calculate!-------------------------------------------------------------

using System;


class Program
{
    static void Main()
    {
        double n = double.Parse(Console.ReadLine());       
        double x = double.Parse(Console.ReadLine());
           
        double factorial = 1;
        double sum = 1;

        for (int i = 1; i <= n; i++)
        {
            factorial *= i;
            sum = sum + ((factorial) / (Math.Pow(x, i)));
        }

        Console.WriteLine("{0:F5}", sum);
         
    }
}

06. Calculate Again!-----------------------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    {
        BigInteger n = BigInteger.Parse(Console.ReadLine());
        BigInteger k = BigInteger.Parse(Console.ReadLine());
        if (k > 1 && n > k && n < 100)
        {
            BigInteger factorialN = 1;
            BigInteger factorialK = 1;
            BigInteger sum = 1;

            for (int i = 1; i <= n; i++)
            {
                factorialN *= i;
                if (i <= k)
                {
                    factorialK *= i;
                }

                else
                {
                    continue;
                }
            }
            sum = factorialN / factorialK;
            Console.WriteLine(sum);
        }
        else { }
    }
}

07. Calculate 3!----------------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    {
        BigInteger n = BigInteger.Parse(Console.ReadLine());
        BigInteger k = BigInteger.Parse(Console.ReadLine());
        
            BigInteger factorialN = 1;
            BigInteger factorialK = 1;
            BigInteger NK = n - k;
            BigInteger factorialNK = 1;
            BigInteger sum = 1;

            for (int i = 1; i <= n; i++)
            {
                factorialN *= i;

                if (i <= k)
                {
                    factorialK *= i;
                }

                else
                {
                    continue;
                }   
            }

            for (int i = 1; i <= NK; i++)
            {
                factorialNK *= i;
            }
            sum = factorialN / (factorialK * (factorialNK));
            Console.WriteLine(sum);
        
    }
}

08. Catalan Numbers-------------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    {
        BigInteger n = BigInteger.Parse(Console.ReadLine());
        if (n >= 0 && n <= 100)
        {
            BigInteger DoubleN = n * 2;
            BigInteger factorialND = 1;
            BigInteger nPlus = n + 1;
            BigInteger factorialPN = 1;
            BigInteger factorial = 1;
            BigInteger sum;

            for (int i = 1; i <= DoubleN; i++)
            {
                factorialND *= i;
            }

            for (int i = 1; i <= nPlus; i++)
            {
                factorialPN *= i;

                if (i <= n)
                {
                    factorial *= i;
                }

                else
                {
                    continue;
                }
            }

            sum = factorialND / (factorialPN * factorial);
            Console.WriteLine(sum);
        }
        else { }
    }
}

09. Matrix of Numbers-----------------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    
    {
        int n = int.Parse(Console.ReadLine());
        int rows = 0;
        int count = 1;
        int a = n;

        for (int i = 1; i <= a; i++)
        {
             if (rows == n)
            {
                break;
            }

            else
            {
                Console.Write("{0} " ,i);

                if (i == a)
                {
                    for (int j = 1; j < 2; j++)
                    {
                        Console.WriteLine();
                        i = count;
                        count++;
                        a++;
                        rows++;
                    }
                }
            }
        }   
    }
}

10. Odd and Even Product------------------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    
    {
        int n = int.Parse(Console.ReadLine());
        if (n >= 4 && n <= 50)
        {
            string[] numbers = Console.ReadLine().Split(' ');
            if (numbers.Length == n)
            {
                double odd = 1;
                double even = 1;

                for (int i = 0; i < n; i++)
                {
                    int a = i;
                    if ((a %= 2) == 0)
                    {
                        even *= double.Parse(numbers[i]);
                    }

                    else
                    {
                        odd *= double.Parse(numbers[i]);
                    }
                }

                if (odd < 0 || even < 0)
                { }

                else
                {
                    if (odd == even)
                    {
                        Console.WriteLine("yes {0}", odd);
                    }

                    else
                    {
                        Console.WriteLine("no {0} {1}", even, odd);
                    }
                }
            }
            else { }
        }

        else { }
    }
}

11. Binary to Decimal----------------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    
    {
        string binary = Console.ReadLine();
        char part;
        long decimalNumber = 0;
        int count = 0;
        int power;
        int value;

        for (int i = binary.Length - 1; i >= 0; i--)
        {
            part = binary[i];
            string two = part.ToString();
            int.TryParse(two,out value);
            power = (int)Math.Pow(2, count);
            decimalNumber += (value * power);
            count++;
        }
        Console.WriteLine(decimalNumber);   
    }
}

12. Decimal to Binary-----------------------------------------

using System;
using System.Numerics;

class Program
{
    static void Main()
    {
        long number = long.Parse(Console.ReadLine());
        long numberDivide;
        int arraylength = 0;
        int count = 0;

        for (long i = number; i > 0; i /= 2)
        {
            arraylength++;
        }

        string[] finalNumber = new string[arraylength];

        for (long i = number; i >= 1; i /= 2)
        {


            numberDivide = i % 2;
            if (numberDivide == 0)
            {
                string a = numberDivide.ToString();
                
                finalNumber[count] = a;  
            }

            else if (numberDivide == 1)
            {
                string a = numberDivide.ToString();

                finalNumber[count] = a;
            }
            count++;
        }

        for (int i = finalNumber.Length - 1; i >= 0; i--)
        {
            Console.Write(finalNumber[i]);
        }
    }
}

13. Decimal to Hex--------------------------------------------------

using System;



    class Program
    {
        static void Main()
        {
            long decimalNumber = long.Parse(Console.ReadLine());

            if (decimalNumber == 0)
            {
                Console.WriteLine(0);
            }
            else
            {
                string hexaNumber = "";        
                while (decimalNumber > 0)
                {
                    long checkRemainder = decimalNumber % 16;
                    string remainder = "";
                    switch (checkRemainder)
                    {
                        case 10: remainder = "A"; break;
                        case 11: remainder = "B"; break;
                        case 12: remainder = "C"; break;
                        case 13: remainder = "D"; break;
                        case 14: remainder = "E"; break;
                        case 15: remainder = "F"; break;
                        default: remainder = checkRemainder.ToString(); break;
                    }
                    hexaNumber = remainder + hexaNumber;
                    decimalNumber /= 16;
                }
                Console.WriteLine(hexaNumber);
            }      
        }
    }

14. Hex to Decimal------------------------------------------------------

using System;



    class Program
    {
        static void Main()
        {
            string hexNumber = Console.ReadLine();
            int a = hexNumber.Length;

            ulong b = 0;
            ulong result = 0;
            ulong count = 0;
           for (int i = a-1; i >= 0; i--)
           {

               if (char.IsNumber(hexNumber[i]) == true)
               {
                   b = (uint)Char.GetNumericValue(hexNumber[i]);

               }

               else
               {
                   if (hexNumber[i] == 'A')
                   {
                       b = 10;
                   }
                   else if (hexNumber[i] == 'B')
                   {
                       b = 11;
                   }
                   else if (hexNumber[i] == 'C')
                   {
                       b = 12;
                   }
                   else if (hexNumber[i] == 'D')
                   {
                       b = 13;
                   }
                   else if (hexNumber[i] == 'E')
                   {
                       b = 14;
                   }
                   else if (hexNumber[i] == 'F')
                   {
                       b = 15;
                   }

                   else { }
               }
              result += b * (ulong)Math.Pow(16, count);
              count++;
           }
           Console.WriteLine(result); 
        }
    }

15. GCD---------------------------------------------------------------

using System;



    class Program
    {
        static void Main()
        {
           string number = Console.ReadLine();
           string[] numbers = number.Split(' ');
               uint a = uint.Parse(numbers[0]);
               uint b = uint.Parse(numbers[1]);
               if (numbers.Length == 2)
               {   
                       while (a != 0 && b != 0)
                       {
                           if (a > b)
                               a %= b;
                           else
                               b %= a;
                       }

                       if (a == 0)
                           Console.WriteLine(b);
                       else
                           Console.WriteLine(a);
                  
               }
               else { }
           }
            
    }

16. Trailing 0 in N!------------------------------------------------------

using System;
class TrailingZeroInN
{
    static void Main()
    {
        int num = int.Parse(Console.ReadLine());

        int zeros = 0;
        while (num >= 5)
        {
            num /= 5;
            zeros += num;
        }
        Console.WriteLine(zeros);
    }
}

17. Spiral Matrix-------------------------------------------

using System;
    class MainClass
    {
        public static void Main()
        {
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, n];
            int row = 0;
            int col = 0;
            string direction = "right";
            int maxRotations = n * n;

            for (int i = 1; i <= maxRotations; i++)
            {
                if (direction ==  "right" && (col > n - 1 || matrix[row, col] != 0))
                {
                    direction = "down";
                    col--;
                    row++;
                }
                if (direction == "down" && (row > n - 1 || matrix[row, col] != 0))
                {
                    direction = "left";
                    row--;
                    col--;
                }
                if (direction == "left" && (col < 0 || matrix[row, col] != 0))
                {
                    direction = "up";
                    col++;
                    row--;
                }
                if (direction == "up" && (row < 0 || matrix[row, col] != 0))
                {
                    direction = "right";
                    row++;
                    col++;
                }

                matrix[row, col] = i;

                if(direction == "right")
                {
                    col++;
                }
                if (direction == "down")
                {
                    row++;
                }
                if (direction == "left")
                {
                    col--;
                }
                if (direction == "up")
                {
                    row--;
                }
            }
            for (int r = 0; r < n; r++)
            {
                for (int c = 0; c < n; c++)
                {
                    Console.Write("{0} ", matrix[r, c]);
                }
                Console.WriteLine();
            }
        }
    }

